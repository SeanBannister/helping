{"version":3,"sources":["index.js"],"names":["empty","value","length","constructor","Object","keys","size","each","obj","callback","i","Array","isArray","call","hasOwnProperty"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAOO,SAASA,KAAT,CAAeC,KAAf,EAAsB;AAC3B;AACA,SACE;AACAA,IAAAA,KAAK,IAAI,IAAT,IACA;AACCA,IAAAA,KAAK,CAACC,MAAN,KAAiB,CAAjB,IAAsB,OAAOD,KAAP,KAAiB,UAFxC,IAGA;AACCA,IAAAA,KAAK,CAACE,WAAN,KAAsBC,MAAtB,IAAgCA,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBC,MAAnB,KAA8B,CAJ/D,IAKA;AACAD,IAAAA,KAAK,CAACK,IAAN,KAAe,CANf,IAOA;AACAL,IAAAA,KAAK,KAAKA;AAVZ;AAYD;AAED;;;;;;;;;;;;;;;;AAcO,SAASM,IAAT,CAAcC,GAAd,EAAmBC,QAAnB,EAA6B;AAClC,MAAIP,MAAJ;AAAA,MAAYQ,CAAC,GAAG,CAAhB,CADkC,CAGlC;AACA;AACA;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;AACtBN,IAAAA,MAAM,GAAGM,GAAG,CAACN,MAAb;;AACA,WAAOQ,CAAC,GAAGR,MAAX,EAAmBQ,CAAC,EAApB,EAAwB;AACtB,UAAID,QAAQ,CAACI,IAAT,CAAcL,GAAG,CAACE,CAAD,CAAjB,EAAsBA,CAAtB,EAAyBF,GAAG,CAACE,CAAD,CAA5B,MAAqC,KAAzC,EAAgD;AAC9C;AACD;AACF;AACF,GAPD,CAQA;AARA,OASK;AACH,WAAKA,CAAL,IAAUF,GAAV,EAAe;AACb,YAAIA,GAAG,CAACM,cAAJ,CAAmBJ,CAAnB,CAAJ,EAA2B;AACzB,cAAID,QAAQ,CAACI,IAAT,CAAcL,GAAG,CAACE,CAAD,CAAjB,EAAsBA,CAAtB,EAAyBF,GAAG,CAACE,CAAD,CAA5B,MAAqC,KAAzC,EAAgD;AAC9C;AACD;AACF;AACF;AACF;;AACD,SAAOF,GAAP;AACD","file":"helping.js","sourceRoot":"..","sourcesContent":["/**\r\n * Check if a variable|array|object|etc is empty|null|undefined|etc. \r\n * A full list of what this function considers to be null can be seen in the tests of the Helping project.\r\n * \r\n * @param {(*)} value\r\n * @return {boolean} A boolean that states if the parsed in value is considered empty.\r\n */\r\nexport function empty(value) {\r\n  // If any of these return true this function returns true.\r\n  return (\r\n    // Null or undefined.\r\n    value == null ||\r\n    // Length is zero && it's not a function.\r\n    (value.length === 0 && typeof value !== \"function\") ||\r\n    // Is an Object && is empty. Just detects: {}\r\n    (value.constructor === Object && Object.keys(value).length === 0) ||\r\n    // Check if a Set() or Map() is empty\r\n    value.size === 0 ||\r\n    // Check if NaN - The only JavaScript value that is unequal to itself.\r\n    value !== value\r\n  );\r\n}\r\n\r\n/**\r\n * Iterate over an Object|Array and return the key and value of each property. \r\n * - Doesn't iterate over prototypes.\r\n * - Loops can be broken with \"return false\".\r\n * \r\n * This was developed to overcome some of the shortcomings of other methods: https://codepen.io/SeanBannister/pen/qOoLrm\r\n * \r\n * This code is a modified version of jQuery 3.5.0's $.each\r\n * \r\n * @license MIT Copyright JS Foundation and other contributors, https://js.foundation/\r\n *\r\n * @param {(Object|Array)} obj An object we'll iterate over.\r\n * @param {function(number|string, *)} callback Returns a key (index) and a value.\r\n */\r\nexport function each(obj, callback) {\r\n  var length, i = 0;\r\n  \r\n  // If obj is an array\r\n  // Note: The function from the jquery library originally had their own isArrayLike function here, I couldn't\r\n  //       get the extracted version working as expected so I'm using .isArray as I believe it will meet our needs.\r\n  if (Array.isArray(obj)) {\r\n    length = obj.length;\r\n    for (; i < length; i++) {\r\n      if (callback.call(obj[i], i, obj[i]) === false) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  // If obj is a javascript object\r\n  else {\r\n    for (i in obj) {\r\n      if (obj.hasOwnProperty(i)) {\r\n        if (callback.call(obj[i], i, obj[i]) === false) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return obj;\r\n}"]}